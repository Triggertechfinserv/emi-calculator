<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>CRM — Customer / Income / Obligations / Eligibility / Policy</title>

  <!-- Tailwind CSS CDN -->
  <script src="https://cdn.tailwindcss.com"></script>

  <style>
    /* keep your previous look and behavior */
    body { font-family: Inter, sans-serif; height:100vh; overflow:hidden; }
    .layout { height:100vh; display:grid; grid-template-columns: 280px 1fr; }
    aside { overflow:auto; }
    .sidebar-item { display:flex; align-items:center; gap:.5rem; padding:.6rem .8rem; border-radius:.4rem; cursor:pointer; }
    .sidebar-item.active { background:#2563eb; color:#fff; font-weight:600; }
    .sidebar-item:hover { background:#e2e8f0; }
    .section-card { border:1px solid #e2e8f0; background:white; border-radius:.25rem; display:flex; flex-direction:column; height: calc(100vh - 32px); margin: 16px; }
    .section-header { background:#1d4ed8; color:white; padding:.7rem 1rem; font-weight:600; border-radius:.25rem .25rem 0 0; }
    .section-body { padding:1rem; overflow-y:auto; }
    .subpanel-header { background:#0ea5e9; color:white; padding:.5rem .75rem; font-weight:700; border-radius:.25rem; margin-bottom:.5rem; }
    .form-label { font-size:.85rem; font-weight:600; color:#334155; margin-bottom:.25rem; display:block; }
    .form-input, .form-select { border:1px solid #cbd5e1; border-radius:.3rem; padding:.45rem .6rem; width:100%; font-size:.9rem; background:white; }
    .small-muted { color:#64748b; font-size:0.9rem; }
    .table-row { display:grid; grid-template-columns: 2fr 1fr 1fr 40px; gap:8px; align-items:center; margin-bottom:8px; }
    .bt-flag { background:#fff7ed; border-left:4px solid #fb923c; padding:.5rem; border-radius:.25rem; }
    .bt-row { opacity:0.85; }
    .bt-summary { background:#fffbeb; border:1px dashed #f59e0b; padding:.5rem; border-radius:.25rem; margin-top:.75rem; }
    /* color styles for revise risk and risk segment (fallback classes) */
    .bg-dark-red { background:#7f1d1d !important; color:white !important; }
    .bg-red { background:#dc2626 !important; color:white !important; }
    .bg-amber { background:#d97706 !important; color:black !important; }
    .bg-light-green { background:#bbf7d0 !important; color:black !important; }
    .bg-dark-green { background:#065f46 !important; color:white !important; }
    .bg-medium-green { background:#86efac !important; color:black !important; } /* lightish */
    select.colored { color:inherit; }
    @media (max-width: 900px) {
      .layout { grid-template-columns: 1fr; }
      .section-card { margin: 12px; height: calc(100vh - 160px); }
    }
  </style>
</head>
<body>

  <div class="layout">
    <!-- Sidebar -->
    <aside class="bg-white border-r shadow">
      <div class="p-4">
        <button id="nextStage" class="w-full bg-blue-600 text-white py-2 rounded mb-4">Next Stage</button>
        <div class="space-y-1">
          <div class="sidebar-item active" data-section="customer">Customer Details</div>
          <div class="sidebar-item" data-section="income">Income Details</div>
          <div class="sidebar-item" data-section="obligations">Obligations</div>
          <div class="sidebar-item" data-section="eligibility">Full Eligibility</div>
          <div class="sidebar-item" data-section="policy">Policy Trigger</div>
        </div>

        <hr class="my-4" />

        <div class="space-y-2 text-sm">
          <button id="saveAll" class="w-full bg-emerald-600 text-white py-2 rounded">Save (local)</button>
          <button id="exportCsv" class="w-full bg-slate-100 border py-2 rounded">Export CSV</button>
          <div class="small-muted mt-2">Data saved locally in your browser — replace with backend calls later.</div>
        </div>
      </div>
    </aside>

    <!-- Main Content -->
    <main class="p-0">
      <!-- Customer Details -->
      <div id="section-customer" class="section-card">
        <div class="section-header">Customer Details</div>
        <div class="section-body space-y-6">

          <!-- Personal Details subpanel -->
          <div>
            <div class="subpanel-header">Personal Details</div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="form-label">PAN</label>
                <input id="cust_pan" class="form-input" value="" />
              </div>
              <div>
                <label class="form-label">Salutation</label>
                <select id="cust_salutation" class="form-select">
                  <option>Mr.</option><option>Mrs.</option><option>Ms.</option>
                </select>
              </div>

              <div>
                <label class="form-label">Customer Name</label>
                <input id="cust_name" class="form-input" value="" />
              </div>

              <div>
                <label class="form-label">Mobile</label>
                <input id="cust_mobile" class="form-input" value="" />
              </div>

              <div>
                <label class="form-label">DOB (As per POI)</label>
                <input id="cust_dob" type="date" class="form-input" value="" />
              </div>

              <div>
                <label class="form-label">Age (auto)</label>
                <input id="cust_age" class="form-input" value="41" readonly />
              </div>

              <div>
                <label class="form-label">Gender</label>
                <select id="cust_gender" class="form-select">
                  <option>Male</option><option>Female</option><option>Other</option>
                </select>
              </div>

              <div>
                <label class="form-label">Location</label>
                <input id="cust_email" class="form-input" placeholder="Vadodara/Ahmedabad" />
              </div>
            </div>
          </div>

          <!-- Employment Details subpanel -->
          <div>
            <div class="subpanel-header">Employment Details</div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label class="form-label">Company Name</label>
                <input id="company_name" class="form-input" value="Reliance Industries Limited" />
              </div>
              <div>
                <label class="form-label">Designation</label>
                <input id="designation" class="form-input" value="" />
              </div>
            </div>

            <!-- Company Categories -->
            <div class="border rounded">
              <div class="bg-blue-600 text-white px-3 py-2 font-semibold">Company Category</div>
              <div class="divide-y">
                <div class="grid grid-cols-2 gap-4 items-center p-3">
                  <div>Bajaj Finance Limited</div>
                  <select id="cat_bajaj" class="form-select">
                    <option value="">-- Select Bajaj Category --</option>
                    <option>Diamond</option><option>Platinum</option><option>Blue</option>
                    <option>Gold</option><option>Silver</option><option>PSU</option>
                    <option>Central Gov</option><option>State Gov</option><option>Unlisted</option>
                  </select>
                </div>
                <div class="grid grid-cols-2 gap-4 items-center p-3">
                  <div>TATA Capital Limited</div>
                  <select id="cat_tata" class="form-select">
                    <option value="">-- Select TATA Category --</option>
                    <option>TGE</option><option>Super CAT A</option><option>CAT A</option>
                    <option>CAT B</option><option>CAT C</option><option>Unlisted</option><option>Delisted</option>
                  </select>
                </div>
                <div class="grid grid-cols-2 gap-4 items-center p-3">
                  <div>HDFC Bank Limited</div>
                  <select id="cat_hdfc" class="form-select">
                    <option value="">-- Select HDFC Category --</option>
                    <option>Super A</option><option>CAT A</option><option>CAT B</option>
                    <option>CAT C</option><option>CAT D</option><option>CAT E</option>
                    <option>CAT GOV</option><option>NR</option>
                  </select>
                </div>
                <div class="grid grid-cols-2 gap-4 items-center p-3">
                  <div>ICICI Bank Limited</div>
                  <select id="cat_icici" class="form-select">
                    <option value="">-- Select ICICI Category --</option>
                    <option>CAT A</option><option>CAT B</option><option>CAT C</option><option>Unlisted</option>
                  </select>
                </div>
              </div>
            </div>
          </div>

          <!-- Bureau Profile Details subpanel (ordered & colors preserved) -->
          <div>
            <div class="subpanel-header">Bureau Profile Details</div>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <!-- 1. CIBIL Score -->
              <div>
                <label class="form-label">CIBIL Score</label>
                <input id="bureau_cibil_score" type="number" min="0" max="999" class="form-input" />
              </div>

              <!-- 2. PL Score -->
              <div>
                <label class="form-label">PL Score</label>
                <input id="bureau_pl_score" type="number" min="0" class="form-input" />
              </div>

              <!-- 3. Risk Segment -->
              <div>
                <label class="form-label">Risk Segment</label>
                <select id="bureau_risk_segment" class="form-select colored">
                  <option value="">Select</option>
                  <option value="low">Low Risk</option>
                  <option value="medium">Medium Risk</option>
                  <option value="high">High Risk</option>
                </select>
              </div>

              <!-- 4. Revise Risk Segment -->
              <div>
                <label class="form-label">Revise Risk Segment</label>
                <select id="bureau_rev_risk_segment" class="form-select colored">
                  <option value="">Select</option>
                  <option value="dark-red">Dark Red</option>
                  <option value="red">Red</option>
                  <option value="amber">Amber</option>
                  <option value="green">Green</option>
                  <option value="super-green">Super Green</option>
                </select>
              </div>

              <!-- 5. Overdue - DowDown -->
              <div>
                <label class="form-label">Overdue - DowDown</label>
                <select id="bureau_overdue_dowdown" class="form-select colored">
                  <option value="">Select</option>
                  <option value="yes">Yes</option>
                  <option value="no">No</option>
                </select>
              </div>

              <!-- 6. PL Enquiry in 1 Month -->
              <div>
                <label class="form-label">PL Enquiry in 1 Month</label>
                <input id="bureau_pl_enq_1m" type="number" min="0" class="form-input" />
              </div>

              <!-- 7. PL Enquiry in 3 Month -->
              <div>
                <label class="form-label">PL Enquiry in 3 Month</label>
                <input id="bureau_pl_enq_3m" type="number" min="0" class="form-input" />
              </div>

              <!-- 8. PL Enquiry in 12 Month -->
              <div>
                <label class="form-label">PL Enquiry in 12 Month</label>
                <input id="bureau_pl_enq_12m" type="number" min="0" class="form-input" />
              </div>
            </div>
          </div>

        </div>
      </div>

      <!-- Income Details -->
      <div id="section-income" class="section-card hidden">
        <div class="section-header">Income Details</div>
        <div class="section-body">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label class="form-label">Primary Net Salary (₹)</label>
              <input id="income_primary" type="number" class="form-input" value="50000" />
            </div>
            <div>
              <label class="form-label">Additional Income (₹)</label>
              <input id="income_additional" type="number" class="form-input" value="5000" />
            </div>
            <div>
              <label class="form-label">Total Income (₹)</label>
              <div id="income_total" class="form-input" style="display:flex;align-items:center;">₹0</div>
            </div>
          </div>

          <hr class="my-4" />

          <div class="flex items-center justify-between mb-2">
            <div class="small-muted font-semibold">Other Income Sources</div>
            <div class="flex gap-2">
              <button id="addIncomeRow" class="px-3 py-1 bg-slate-100 border rounded">+ Add</button>
              <button id="clearIncomeRows" class="px-3 py-1 bg-red-50 border rounded">Clear</button>
            </div>
          </div>

          <div id="incomeRows" class="space-y-2">
            <!-- dynamic rows -->
          </div>
        </div>
      </div>

      <!-- Obligations (single-line rows) -->
      <div id="section-obligations" class="section-card hidden">
        <div class="section-header">Obligations (Loans / Cards)</div>
        <div class="section-body">
          <div class="small-muted mb-3">Add active loans / credit card EMIs that count towards obligations.</div>

          <!-- Single-line Header Row -->
          <div class="grid grid-cols-8 gap-2 font-semibold text-sm mb-2" style="grid-template-columns: 1.5fr 0.9fr 1fr 1fr 1fr 1fr 0.6fr 1fr;">
            <div>Bank Name</div>
            <div>Open Date</div>
            <div>Loan Type</div>
            <div>Loan Amount</div>
            <div>Outstanding</div>
            <div>EMI</div>
            <div>BT</div>
            <div>Remarks</div>
          </div>

          <!-- Rows container -->
          <div id="obligationRows" class="space-y-2"></div>

          <div class="mt-3 flex gap-2">
            <button id="addObligation" class="px-3 py-1 bg-slate-100 border rounded">+ Add Obligation</button>
            <button id="clearObligations" class="px-3 py-1 bg-red-50 border rounded">Clear</button>
          </div>

          <!-- BT Summary panel -->
          <div id="btSummary" class="bt-summary hidden">
            <div class="font-semibold">Balance Transfer (BT) — BT POS</div>
            <div id="btList" class="mt-2 space-y-1"></div>
            <div class="mt-2">
              <div class="small-muted">BT Total Outstanding</div>
              <div id="bt_total" class="form-input">₹0</div>
            </div>
          </div>

          <div class="mt-4 grid grid-cols-2 gap-4">
            <div>
              <div class="small-muted">Total Outstanding (excluding BT)</div>
              <div id="total_outstanding" class="form-input">₹0</div>
            </div>
            <div>
              <div class="small-muted">Total EMI (excluding BT)</div>
              <div id="total_emi" class="form-input">₹0</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Full Eligibility -->
      <div id="section-eligibility" class="section-card hidden">
        <div class="section-header">Full Eligibility</div>
        <div class="section-body">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <div class="small-muted">Total Income (₹)</div>
              <div id="elig_total_income" class="form-input">₹0</div>
            </div>
            <div>
              <div class="small-muted">Total Obligations - EMI (₹)</div>
              <div id="elig_total_obligations" class="form-input">₹0</div>
            </div>

            <div>
              <div class="small-muted">Eligible Surplus (Income - EMI)</div>
              <div id="elig_surplus" class="form-input">₹0</div>
            </div>

            <div>
              <div class="small-muted">Debt-to-Income Ratio (DTI)</div>
              <div id="elig_dti" class="form-input">0%</div>
            </div>
          </div>

          <div class="mt-4">
            <div class="small-muted mb-2 font-semibold">Eligibility Notes</div>
            <textarea id="elig_notes" rows="4" class="form-input" placeholder="Add eligibility remarks..."></textarea>
          </div>
        </div>
      </div>

      <!-- Policy Trigger -->
      <div id="section-policy" class="section-card hidden">
        <div class="section-header">Policy Trigger</div>
        <div class="section-body">
          <div class="small-muted mb-3">Run policy checks and see which rules fire. Modify rules in-code later.</div>

          <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
            <div>
              <label class="form-label">DTI Threshold (%)</label>
              <input id="policy_dti_threshold" type="number" class="form-input" value="50" />
            </div>
            <div>
              <label class="form-label">Minimum Eligible Surplus (₹)</label>
              <input id="policy_min_surplus" type="number" class="form-input" value="10000" />
            </div>
            <div>
              <label class="form-label">CIBIL (Mock)</label>
              <select id="policy_cibil" class="form-select">
                <option>Pending</option><option>Approved</option><option>Rejected</option>
              </select>
            </div>
          </div>

          <div class="mt-4 flex gap-2">
            <button id="runPolicy" class="px-3 py-1 bg-indigo-600 text-white rounded">Run Policy</button>
            <button id="clearPolicyLog" class="px-3 py-1 bg-slate-100 border rounded">Clear Log</button>
          </div>

          <div class="mt-4">
            <div class="small-muted font-semibold mb-2">Policy Log (latest)</div>
            <div id="policyLog" class="p-2 bg-white border rounded max-h-40 overflow-auto small-muted"></div>
          </div>
        </div>
      </div>

    </main>
  </div>

  <script>
    /* Sidebar navigation logic */
    const items = document.querySelectorAll('.sidebar-item');
    const sections = {
      customer: document.getElementById('section-customer'),
      income: document.getElementById('section-income'),
      obligations: document.getElementById('section-obligations'),
      eligibility: document.getElementById('section-eligibility'),
      policy: document.getElementById('section-policy')
    };

    items.forEach(item => {
      item.addEventListener('click', () => {
        items.forEach(i => i.classList.remove('active'));
        item.classList.add('active');
        Object.values(sections).forEach(s => s.classList.add('hidden'));
        const sec = item.dataset.section;
        sections[sec].classList.remove('hidden');
      });
    });

    /* Basic local state + helpers */
    const stateKey = 'crm_five_sections_final';
    function loadState(){
      try {
        const raw = localStorage.getItem(stateKey);
        return raw ? JSON.parse(raw) : null;
      } catch(e){ return null; }
    }
    function saveState(obj){
      localStorage.setItem(stateKey, JSON.stringify(obj));
      appendPolicyLog('Saved state locally.');
    }
    function appendPolicyLog(msg){
      const el = document.getElementById('policyLog');
      const t = new Date().toLocaleString();
      el.innerHTML = `<div><b>${t}</b> — ${msg}</div>` + el.innerHTML;
    }

    /* Utility: age compute */
    const dobEl = document.getElementById('cust_dob');
    const ageEl = document.getElementById('cust_age');
    function computeAgeFromDob(){
      const v = dobEl.value;
      if (!v) { ageEl.value = ''; return; }
      const dob = new Date(v);
      const diff = Date.now() - dob.getTime();
      const ageDt = new Date(diff);
      const years = Math.abs(ageDt.getUTCFullYear() - 1970);
      ageEl.value = years;
    }
    dobEl.addEventListener('change', computeAgeFromDob);
    computeAgeFromDob();

    /* Income: dynamic rows + totals */
    const incomePrimary = document.getElementById('income_primary');
    const incomeAdditional = document.getElementById('income_additional');
    const incomeTotalEl = document.getElementById('income_total');
    const incomeRows = document.getElementById('incomeRows');

    function computeIncomeTotal(){
      let total = Number(incomePrimary.value||0) + Number(incomeAdditional.value||0);
      // additional rows
      incomeRows.querySelectorAll('.income-row').forEach(r=>{
        const amt = Number(r.querySelector('.inc-amt').value||0);
        total += amt;
      });
      incomeTotalEl.innerText = '₹' + total.toLocaleString('en-IN');
      // update eligibility fields
      document.getElementById('elig_total_income').innerText = '₹' + total.toLocaleString('en-IN');
      return total;
    }
    incomePrimary.addEventListener('input', computeIncomeTotal);
    incomeAdditional.addEventListener('input', computeIncomeTotal);

    function addIncomeRow(data = {}) {
      const row = document.createElement('div');
      row.className = 'income-row p-2 border rounded flex gap-2 items-center';
      row.innerHTML = `
        <input class="inc-desc form-input" placeholder="Source (e.g., rental)" value="${data.desc||''}" style="flex:2" />
        <input type="number" class="inc-amt form-input" placeholder="Amount" value="${data.amt||0}" style="flex:1" />
        <button class="remove-inc px-2 py-1 bg-red-50 border rounded">✕</button>
      `;
      incomeRows.appendChild(row);
      row.querySelector('.remove-inc').addEventListener('click', ()=>{ row.remove(); computeIncomeTotal(); computeEligibility(); });
      row.querySelector('.inc-amt').addEventListener('input', ()=>{ computeIncomeTotal(); computeEligibility(); });
      computeIncomeTotal();
    }

    document.getElementById('addIncomeRow').addEventListener('click', ()=> addIncomeRow());
    document.getElementById('clearIncomeRows').addEventListener('click', ()=> { incomeRows.innerHTML=''; computeIncomeTotal(); computeEligibility(); });

    // init with one row
    addIncomeRow();

    /* Color mapping and handlers for bureau selects (preserve previous color logic) */
    const riskSelect = document.getElementById('bureau_risk_segment');
    const revRiskSelect = document.getElementById('bureau_rev_risk_segment');
    const overdueSelect = document.getElementById('bureau_overdue_dowdown');

    const riskColors = {
      'low': { bg: '#065f46', color: '#fff' },        // dark green
      'medium': { bg: '#bbf7d0', color: '#000' },     // light green
      'high': { bg: '#dc2626', color: '#fff' }        // red
    };

    const revRiskColors = {
      'dark-red': { bg: '#7f1d1d', color: '#fff' },
      'red': { bg: '#dc2626', color: '#fff' },
      'amber': { bg: '#d97706', color: '#000' },      // dark amber
      'green': { bg: '#bbf7d0', color: '#000' },      // light green
      'super-green': { bg: '#065f46', color: '#fff' } // dark green
    };

    const overdueColors = {
      'yes': { bg: '#dc2626', color: '#fff' },
      'no': { bg: '#16a34a', color: '#fff' }
    };

    function applySelectColor(selectEl, map) {
      const v = selectEl.value || '';
      if (!v) {
        selectEl.style.backgroundColor = '';
        selectEl.style.color = '';
        return;
      }
      const cfg = map[v];
      if (cfg){
        selectEl.style.backgroundColor = cfg.bg;
        selectEl.style.color = cfg.color;
      } else {
        selectEl.style.backgroundColor = '';
        selectEl.style.color = '';
      }
    }

    // wire changes
    riskSelect.addEventListener('change', ()=> applySelectColor(riskSelect, riskColors));
    revRiskSelect.addEventListener('change', ()=> applySelectColor(revRiskSelect, revRiskColors));
    overdueSelect.addEventListener('change', ()=> applySelectColor(overdueSelect, overdueColors));

    // apply on load (if values present)
    applySelectColor(riskSelect, riskColors);
    applySelectColor(revRiskSelect, revRiskColors);
    applySelectColor(overdueSelect, overdueColors);

    /* --- Obligations with single-line rows and BT support --- */
    const obligationRowsEl = document.getElementById('obligationRows');
    const totalOutstandingEl = document.getElementById('total_outstanding');
    const totalEmiEl = document.getElementById('total_emi');
    const btSummaryEl = document.getElementById('btSummary');
    const btListEl = document.getElementById('btList');
    const btTotalEl = document.getElementById('bt_total');

    function computeObligationTotals(){
      let out = 0, emi = 0;
      const btRows = [];
      obligationRowsEl.querySelectorAll('.ob-row').forEach(r=>{
        const isBT = (r.querySelector('.ob-bt').value || '').toLowerCase() === 'yes';
        const outVal = Number(r.querySelector('.ob-out').value||0);
        const emiVal = Number(r.querySelector('.ob-emi').value||0);
        if (isBT){
          btRows.push({ bank: r.querySelector('.ob-bank').value || '', out: outVal, emi: emiVal, remarks: r.querySelector('.ob-remarks').value || ''});
        } else {
          out += outVal;
          emi += emiVal;
        }
      });

      // totals excluding BT
      totalOutstandingEl.innerText = '₹' + out.toLocaleString('en-IN');
      totalEmiEl.innerText = '₹' + emi.toLocaleString('en-IN');

      // BT summary
      if (btRows.length > 0){
        btSummaryEl.classList.remove('hidden');
        btListEl.innerHTML = '';
        let btTotal = 0;
        btRows.forEach(b => {
          btTotal += Number(b.out || 0);
          const div = document.createElement('div');
          div.className = 'bt-flag';
          div.innerHTML = `<div class="font-semibold">${b.bank || 'Unknown Lender'}</div><div class="small-muted">Outstanding: ₹${Number(b.out||0).toLocaleString('en-IN')} | EMI: ₹${Number(b.emi||0).toLocaleString('en-IN')}</div><div class="small-muted">Remarks: ${b.remarks||'-'}</div>`;
          btListEl.appendChild(div);
        });
        btTotalEl.innerText = '₹' + btTotal.toLocaleString('en-IN');
      } else {
        btSummaryEl.classList.add('hidden');
        btListEl.innerHTML = '';
        btTotalEl.innerText = '₹0';
      }

      // update eligibility obligations
      document.getElementById('elig_total_obligations').innerText = '₹' + emi.toLocaleString('en-IN');
      return { out, emi, btRows };
    }

    function addObligationRow(data = {}){
      /* row template: single-line grid with 8 fields */
      const row = document.createElement('div');
      row.className = 'ob-row p-2 border rounded';
      row.innerHTML = `
        <div class="grid grid-cols-8 gap-2 items-center"
             style="grid-template-columns: 1.5fr 0.9fr 1fr 1fr 1fr 1fr 0.6fr 1fr;">
          <input class="form-input ob-bank" placeholder="Bank Name" value="${data.bank||''}" />
          <input type="date" class="form-input ob-open" value="${data.open||''}" />
          <select class="form-select ob-type">
            <option value="">Select Loan Type</option>
            <option value="personal">Personal Loan</option>
            <option value="home">Home Loan</option>
            <option value="auto">Auto Loan</option>
            <option value="credit-card">Credit Card</option>
            <option value="gold">Gold Loan</option>
            <option value="business">Business Loan</option>
            <option value="other">Other</option>
          </select>

          <input type="number" min="0" class="form-input ob-loanamt" placeholder="Loan Amount" value="${data.loanAmt||0}" />
          <input type="number" min="0" class="form-input ob-out" placeholder="Outstanding" value="${data.out||0}" />
          <input type="number" min="0" class="form-input ob-emi" placeholder="EMI" value="${data.emi||0}" />
          <select class="form-select ob-bt">
            <option value="no">Not BT</option>
            <option value="yes"${(data.bt && data.bt === true) ? ' selected' : ''}>Yes (BT)</option>
          </select>
          <input class="form-input ob-remarks" placeholder="Remarks" value="${data.remarks||''}" />
        </div>
        <div class="text-right mt-2">
          <button class="remove-ob px-2 py-1 bg-red-50 border rounded">Remove</button>
        </div>
      `;
      obligationRowsEl.appendChild(row);

      // element refs
      const typeEl = row.querySelector('.ob-type');
      const outEl = row.querySelector('.ob-out');
      const emiEl = row.querySelector('.ob-emi');
      const btEl = row.querySelector('.ob-bt');

      // when loan type changes: if credit card -> EMI = 5% of outstanding and readonly
      function handleTypeChange(){
        if (typeEl.value === 'credit-card'){
          const outVal = Number(outEl.value||0);
          const calc = Math.round(outVal * 0.05);
          emiEl.value = calc;
          emiEl.readOnly = true;
          emiEl.style.backgroundColor = '#f8fafc';
        } else {
          if (!emiEl.dataset.userEdited) {
            emiEl.value = data.emi || 0;
          }
          emiEl.readOnly = false;
          emiEl.style.backgroundColor = '';
        }
        computeObligationTotals();
        computeEligibility();
      }
      typeEl.addEventListener('change', handleTypeChange);

      // when outstanding changes: if credit-card, recalc EMI
      outEl.addEventListener('input', ()=>{
        // clamp >=0
        if (Number(outEl.value) < 0) outEl.value = 0;
        if (typeEl.value === 'credit-card'){
          const calc = Math.round(Number(outEl.value||0) * 0.05);
          emiEl.value = calc;
        }
        computeObligationTotals();
        computeEligibility();
      });

      // allow user to override EMI manually (mark userEdited)
      emiEl.addEventListener('input', ()=>{ emiEl.dataset.userEdited = '1'; computeObligationTotals(); computeEligibility(); });

      // when BT changes: mark styling and recompute totals (excluded if BT)
      btEl.addEventListener('change', ()=>{
        applyRowBTStyle(row, btEl.value === 'yes');
        computeObligationTotals();
        computeEligibility();
      });

      // remove button
      row.querySelector('.remove-ob').addEventListener('click', ()=> { row.remove(); computeObligationTotals(); computeEligibility(); });

      // initial state
      if (data.type) typeEl.value = data.type;
      if (data.bt && data.bt === true) applyRowBTStyle(row, true);
      handleTypeChange();
      computeObligationTotals();
    }

    function applyRowBTStyle(row, isBT){
      if (isBT){
        row.classList.add('bt-row');
        row.querySelector('.ob-bt').style.backgroundColor = '#fffbeb';
      } else {
        row.classList.remove('bt-row');
        row.querySelector('.ob-bt').style.backgroundColor = '';
      }
    }

    document.getElementById('addObligation').addEventListener('click', ()=> addObligationRow());
    document.getElementById('clearObligations').addEventListener('click', ()=> { obligationRowsEl.innerHTML=''; computeObligationTotals(); computeEligibility(); });

    // initialize with one empty row if none exist
    if (obligationRowsEl.querySelectorAll('.ob-row').length === 0) addObligationRow();

    /* Eligibility calculations */
    function computeEligibility(){
      const totalIncome = computeIncomeTotal();
      const { emi } = computeObligationTotals();
      const surplus = totalIncome - emi;
      document.getElementById('elig_surplus').innerText = '₹' + Math.max(0, surplus).toLocaleString('en-IN');
      const dti = totalIncome === 0 ? 0 : Math.round((emi / totalIncome) * 100);
      document.getElementById('elig_dti').innerText = (isFinite(dti) ? dti : 0) + '%';
      // reflect totals too
      document.getElementById('elig_total_income').innerText = '₹' + totalIncome.toLocaleString('en-IN');
      document.getElementById('elig_total_obligations').innerText = '₹' + emi.toLocaleString('en-IN');
    }

    // Recompute eligibility when relevant inputs change
    [incomePrimary, incomeAdditional].forEach(el => el.addEventListener('input', computeEligibility));
    setInterval(computeEligibility, 1000);

    /* Policy engine (simple) */
    const policyDti = document.getElementById('policy_dti_threshold');
    const policyMinSurplus = document.getElementById('policy_min_surplus');
    const policyCibil = document.getElementById('policy_cibil');
    document.getElementById('runPolicy').addEventListener('click', ()=>{
      computeEligibility();
      // read eligibility numbers
      const totalIncomeText = document.getElementById('elig_total_income').innerText.replace(/[₹,]/g,'') || '0';
      const totalIncome = Number(totalIncomeText);
      const totalOblText = document.getElementById('elig_total_obligations').innerText.replace(/[₹,]/g,'') || '0';
      const totalObl = Number(totalOblText);
      const surplusText = document.getElementById('elig_surplus').innerText.replace(/[₹,]/g,'') || '0';
      const surplus = Number(surplusText);

      // compute DTI
      const dti = totalIncome === 0 ? 0 : Math.round((totalObl/totalIncome)*100);

      const results = [];
      // Rule 1: DTI must be <= threshold
      if (dti > Number(policyDti.value || 0)) results.push(`DTI ${dti}% > threshold ${policyDti.value}%`);
      // Rule 2: surplus must be >= min surplus
      if (surplus < Number(policyMinSurplus.value || 0)) results.push(`Surplus ₹${surplus} < min ₹${policyMinSurplus.value}`);
      // Rule 3: CIBIL must be Approved (policy mock)
      if (policyCibil.value !== 'Approved') results.push(`CIBIL not Approved (${policyCibil.value})`);

      // Example additional check using bureau CIBIL score (if provided)
      const bureauCibil = Number(document.getElementById('bureau_cibil_score').value || 0);
      if (bureauCibil && bureauCibil < 600) results.push(`Low CIBIL score ${bureauCibil} (<600)`);

      const pass = results.length === 0;
      const msg = pass ? `Policy PASSED. DTI ${dti}%, Surplus ₹${surplus}` : `Policy BLOCKED: ${results.join('; ')}`;
      appendPolicyLog(msg);
      alert(msg);
    });

    document.getElementById('clearPolicyLog').addEventListener('click', ()=> { document.getElementById('policyLog').innerHTML = ''; });

    /* Save / Export */
    document.getElementById('saveAll').addEventListener('click', ()=>{
      const data = gatherAll();
      saveState(data);
      alert('Saved locally to browser storage.');
    });

    function gatherAll(){
      // customer
      const customer = {
        pan: document.getElementById('cust_pan').value,
        salutation: document.getElementById('cust_salutation').value,
        name: document.getElementById('cust_name').value,
        mobile: document.getElementById('cust_mobile').value,
        dob: document.getElementById('cust_dob').value,
        age: document.getElementById('cust_age').value,
        gender: document.getElementById('cust_gender').value,
        email: document.getElementById('cust_email').value
      };

      // employment
      const employment = {
        company_name: document.getElementById('company_name').value,
        designation: document.getElementById('designation').value,
        cat_bajaj: document.getElementById('cat_bajaj').value,
        cat_tata: document.getElementById('cat_tata').value,
        cat_hdfc: document.getElementById('cat_hdfc').value,
        cat_icici: document.getElementById('cat_icici').value
      };

      // bureau
      const bureau = {
        cibil_score: Number(document.getElementById('bureau_cibil_score').value||0),
        pl_score: Number(document.getElementById('bureau_pl_score').value||0),
        risk_segment: document.getElementById('bureau_risk_segment').value,
        revise_risk_segment: document.getElementById('bureau_rev_risk_segment').value,
        pl_enq_1m: Number(document.getElementById('bureau_pl_enq_1m').value||0),
        pl_enq_3m: Number(document.getElementById('bureau_pl_enq_3m').value||0),
        pl_enq_12m: Number(document.getElementById('bureau_pl_enq_12m').value||0),
        overdue_dowdown: document.getElementById('bureau_overdue_dowdown').value
      };

      // income
      const incomes = [];
      incomeRows.querySelectorAll('.income-row').forEach(r=>{
        incomes.push({ desc: r.querySelector('.inc-desc').value, amt: Number(r.querySelector('.inc-amt').value||0) });
      });
      const incomeSummary = { primary: Number(incomePrimary.value||0), additional: Number(incomeAdditional.value||0), other: incomes };

      // obligations
      const obligations = [];
      obligationRowsEl.querySelectorAll('.ob-row').forEach(r=>{
        obligations.push({
          bank: r.querySelector('.ob-bank').value,
          open_date: r.querySelector('.ob-open').value,
          loan_type: r.querySelector('.ob-type').value,
          loan_amount: Number(r.querySelector('.ob-loanamt').value||0),
          outstanding: Number(r.querySelector('.ob-out').value||0),
          emi: Number(r.querySelector('.ob-emi').value||0),
          bt: r.querySelector('.ob-bt').value,
          remarks: r.querySelector('.ob-remarks').value
        });
      });

      // eligibility totals
      const totals = {
        totalIncome: document.getElementById('elig_total_income').innerText,
        totalObligations: document.getElementById('elig_total_obligations').innerText,
        surplus: document.getElementById('elig_surplus').innerText,
        dti: document.getElementById('elig_dti').innerText
      };

      return { customer, employment, bureau, incomeSummary, obligations, totals, saved_at: new Date().toISOString() };
    }

    document.getElementById('exportCsv').addEventListener('click', ()=> {
      const data = gatherAll();
      // create CSV
      const lines = [];
      lines.push(['PAN','Name','Mobile','DOB','Age','Gender','Email'].join(','));
      lines.push([data.customer.pan,data.customer.name,data.customer.mobile,data.customer.dob,data.customer.age,data.customer.gender,data.customer.email].map(s=>`"${(s||'').toString().replace(/"/g,'""')}"`).join(','));
      lines.push('');
      lines.push(['Company','Designation','Bajaj Cat','Tata Cat','HDFC Cat','ICICI Cat'].join(','));
      lines.push([data.employment.company_name,data.employment.designation,data.employment.cat_bajaj,data.employment.cat_tata,data.employment.cat_hdfc,data.employment.cat_icici].map(s=>`"${(s||'').toString().replace(/"/g,'""')}"`).join(','));
      lines.push('');
      lines.push(['CIBIL Score','PL Score','Risk Segment','Revise Risk Segment','Overdue','PL Enq 1M','PL Enq 3M','PL Enq 12M'].join(','));
      lines.push([data.bureau.cibil_score,data.bureau.pl_score,data.bureau.risk_segment,data.bureau.revise_risk_segment,data.bureau.overdue_dowdown,data.bureau.pl_enq_1m,data.bureau.pl_enq_3m,data.bureau.pl_enq_12m].map(s=>`"${(s||'').toString().replace(/"/g,'""')}"`).join(','));
      lines.push('');
      lines.push(['Total Income','Total Obligations (EMI)','Surplus','DTI'].join(','));
      lines.push([data.totals.totalIncome,data.totals.totalObligations,data.totals.surplus,data.totals.dti].map(s=>`"${s}"`).join(','));
      lines.push('');
      lines.push(['Obligation: Bank,OpenDate,LoanType,LoanAmt,Outstanding,EMI,BT,Remarks'].join(','));
      data.obligations.forEach(o => lines.push([o.bank,o.open_date,o.loan_type,o.loan_amount,o.outstanding,o.emi,o.bt,o.remarks].map(s=>`"${(s||'').toString().replace(/"/g,'""')}"`).join(',')));
      const csv = lines.join('\n');
      const blob = new Blob([csv], {type:'text/csv'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a'); a.href = url; a.download = 'crm_export.csv'; a.click(); URL.revokeObjectURL(url);
    });

    /* Load previous state if exists */
    (function init(){
      const prev = loadState();
      if (prev){
        try {
          // populate customer
          const c = prev.customer || {};
          if (c.pan) document.getElementById('cust_pan').value = c.pan;
          if (c.salutation) document.getElementById('cust_salutation').value = c.salutation;
          if (c.name) document.getElementById('cust_name').value = c.name;
          if (c.mobile) document.getElementById('cust_mobile').value = c.mobile;
          if (c.dob) { document.getElementById('cust_dob').value = c.dob; computeAgeFromDob(); }
          if (c.gender) document.getElementById('cust_gender').value = c.gender;
          if (c.email) document.getElementById('cust_email').value = c.email;

          // employment
          if (prev.employment){
            document.getElementById('company_name').value = prev.employment.company_name || '';
            document.getElementById('designation').value = prev.employment.designation || '';
            document.getElementById('cat_bajaj').value = prev.employment.cat_bajaj || '';
            document.getElementById('cat_tata').value = prev.employment.cat_tata || '';
            document.getElementById('cat_hdfc').value = prev.employment.cat_hdfc || '';
            document.getElementById('cat_icici').value = prev.employment.cat_icici || '';
          }

          // bureau
          if (prev.bureau){
            document.getElementById('bureau_cibil_score').value = prev.bureau.cibil_score || '';
            document.getElementById('bureau_pl_score').value = prev.bureau.pl_score || '';
            document.getElementById('bureau_risk_segment').value = prev.bureau.risk_segment || '';
            document.getElementById('bureau_rev_risk_segment').value = prev.bureau.revise_risk_segment || '';
            document.getElementById('bureau_pl_enq_1m').value = prev.bureau.pl_enq_1m || 0;
            document.getElementById('bureau_pl_enq_3m').value = prev.bureau.pl_enq_3m || 0;
            document.getElementById('bureau_pl_enq_12m').value = prev.bureau.pl_enq_12m || 0;
            document.getElementById('bureau_overdue_dowdown').value = prev.bureau.overdue_dowdown || '';
          }

          // income
          if (prev.incomeSummary){
            incomePrimary.value = prev.incomeSummary.primary || 0;
            incomeAdditional.value = prev.incomeSummary.additional || 0;
            incomeRows.innerHTML = '';
            (prev.incomeSummary.other || []).forEach(x => addIncomeRow({desc: x.desc, amt: x.amt}));
          }

          // obligations
          if (prev.obligations){
            obligationRowsEl.innerHTML = '';
            prev.obligations.forEach(o => addObligationRow({
              bank: o.bank,
              open: o.open_date,
              type: o.loan_type,
              loanAmt: o.loan_amount,
              out: o.outstanding,
              emi: o.emi,
              bt: (o.bt === 'yes' || o.bt === 'Yes' || o.bt === true),
              remarks: o.remarks
            }));
          }

          computeIncomeTotal();
          computeObligationTotals();
          computeEligibility();

          // apply color styles after values loaded
          applySelectColor(document.getElementById('bureau_risk_segment'), riskColors);
          applySelectColor(document.getElementById('bureau_rev_risk_segment'), revRiskColors);
          applySelectColor(document.getElementById('bureau_overdue_dowdown'), overdueColors);

          appendPolicyLog('Loaded saved state.');
        } catch(e){
          console.warn('Failed to load state', e);
        }
      } else {
        computeIncomeTotal();
        computeObligationTotals();
        computeEligibility();
      }
    })();

  </script>
</body>
</html>
